From fd2f1181c4463f04cad49ad08cdc2b1d49cadb42 Mon Sep 17 00:00:00 2001
From: Micah Morton <mortonm@chromium.org>
Date: Mon, 10 Sep 2018 10:26:58 -0700
Subject: [PATCH] CHROMIUM: "nosymfollow" mount option for chromiumos LSM

Add a custom option that can be passed to the mount() call which will
cause the chromiumos LSM to enforce that symlinks are not traversed on
the given file system. This will allow CrOS to disallow symlink
traversal on user-supplied file systems.

CQ-DEPEND=CL:1269737
BUG=chromium:867807
TEST=autotest in CL:1269737

Change-Id: I9ed266e82102b6b0422da94c037eb93c16fa1c58
Signed-off-by: Micah Morton <mortonm@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/1334029
Reviewed-by: Dmitry Torokhov <dtor@chromium.org>

[rebase53(rrangel):
	alloc_secdata has been deleted
	sb_copy_data was moved to into sb_eat_lsm_opts
	sb_kern_mount was moved into into sb_set_mnt_opts
	added support for fs_context_parse_param
	had to rework the way nosymfollow was passed from sb_copy_data to sb_kern_mount
]
Signed-off-by: Raul E Rangel <rrangel@chromium.org>
---
 security/chromiumos/lsm.c | 322 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 316 insertions(+), 6 deletions(-)

diff --git a/security/chromiumos/lsm.c b/security/chromiumos/lsm.c
index a94a4401e018..8f1b824db769 100644
--- a/security/chromiumos/lsm.c
+++ b/security/chromiumos/lsm.c
@@ -23,6 +23,7 @@
 #include <linux/cred.h>
 #include <linux/fs.h>
 #include <linux/fs_struct.h>
+#include <linux/fs_parser.h>
 #include <linux/hashtable.h>
 #include <linux/lsm_hooks.h>
 #include <linux/module.h>
@@ -33,11 +34,25 @@
 #include <linux/sched/task_stack.h>
 #include <linux/sched.h>	/* current and other task related stuff */
 #include <linux/security.h>
+#include <uapi/linux/mount.h>
 
 #include "inode_mark.h"
 #include "process_management.h"
 #include "utils.h"
 
+/*
+ * Offset in the fc->security buffer where the ChromiumOS LSM options are
+ * stored. Must be larger than selinux_mnt_opts. 512 was chosen
+ * to give selinux_mnt_opts to grow in the future.
+ */
+#define LSM_OPTS_OFFSET 512
+
+/*
+ * We don't have an easy way to tell who allocated the fc->security buffer
+ * so we use a magic value to ensure it was this module that allocated it
+ */
+#define LSM_OPT_MAGIC 0x0123456789ABCDEF
+
 #define NUM_BITS 8 // 128 buckets in hash table
 
 static DEFINE_HASHTABLE(process_setuid_policy_hashtable, NUM_BITS);
@@ -72,6 +87,14 @@ struct entry {
 	uint64_t child_kuid;
 };
 
+static DEFINE_HASHTABLE(sb_nosymfollow_hashtable, NUM_BITS);
+
+struct sb_entry {
+	struct hlist_node next;
+	struct hlist_node dlist; /* for deletion cleanup */
+	uintptr_t sb;
+};
+
 #if defined(CONFIG_SECURITY_CHROMIUMOS_NO_UNPRIVILEGED_UNSAFE_MOUNTS) || \
 	defined(CONFIG_SECURITY_CHROMIUMOS_NO_SYMLINK_MOUNT)
 static void report(const char *origin, const struct path *path, char *operation)
@@ -185,24 +208,144 @@ static int chromiumos_security_sb_mount(const char *dev_name,
 	return 0;
 }
 
+static DEFINE_SPINLOCK(sb_nosymfollow_hashtable_spinlock);
+
+/* Check for entry in hash table. */
+static bool chromiumos_check_sb_nosymfollow_hashtable(struct super_block *sb)
+{
+	struct sb_entry *entry;
+	uintptr_t sb_pointer = (uintptr_t)sb;
+	bool found = false;
+
+	rcu_read_lock();
+	hash_for_each_possible_rcu(sb_nosymfollow_hashtable,
+				   entry, next, sb_pointer) {
+		if (entry->sb == sb_pointer) {
+			found = true;
+			break;
+		}
+	}
+	rcu_read_unlock();
+
+	/*
+	 * Its possible that a policy gets added in between the time we check
+	 * above and when we return false here. Such a race condition should
+	 * not affect this check however, since it would only be relevant if
+	 * userspace tried to traverse a symlink on a filesystem before that
+	 * filesystem was done being mounted (or potentially while it was being
+	 * remounted with new mount flags).
+	 */
+	return found;
+}
+
+/* Add entry to hash table. */
+static int chromiumos_add_sb_nosymfollow_hashtable(struct super_block *sb)
+{
+	struct sb_entry *new;
+	uintptr_t sb_pointer = (uintptr_t)sb;
+
+	/* Return if entry already exists */
+	if (chromiumos_check_sb_nosymfollow_hashtable(sb))
+		return 0;
+
+	new = kzalloc(sizeof(struct sb_entry), GFP_KERNEL);
+	if (!new)
+		return -ENOMEM;
+	new->sb = sb_pointer;
+	spin_lock(&sb_nosymfollow_hashtable_spinlock);
+	hash_add_rcu(sb_nosymfollow_hashtable, &new->next, sb_pointer);
+	spin_unlock(&sb_nosymfollow_hashtable_spinlock);
+	return 0;
+}
+
+/* Flush all entries from hash table. */
+void chromiumos_flush_sb_nosymfollow_hashtable(void)
+{
+	struct sb_entry *entry;
+	struct hlist_node *hlist_node;
+	unsigned int bkt_loop_cursor;
+	HLIST_HEAD(free_list);
+
+	/*
+	 * Could probably use hash_for_each_rcu here instead, but this should
+	 * be fine as well.
+	 */
+	spin_lock(&sb_nosymfollow_hashtable_spinlock);
+	hash_for_each_safe(sb_nosymfollow_hashtable, bkt_loop_cursor,
+			   hlist_node, entry, next) {
+		hash_del_rcu(&entry->next);
+		hlist_add_head(&entry->dlist, &free_list);
+	}
+	spin_unlock(&sb_nosymfollow_hashtable_spinlock);
+	synchronize_rcu();
+	hlist_for_each_entry_safe(entry, hlist_node, &free_list, dlist)
+		kfree(entry);
+}
+
+/* Remove entry from hash table. */
+static void chromiumos_remove_sb_nosymfollow_hashtable(struct super_block *sb)
+{
+	struct sb_entry *entry;
+	struct hlist_node *hlist_node;
+	uintptr_t sb_pointer = (uintptr_t)sb;
+	bool free_entry = false;
+
+	/*
+	 * Could probably use hash_for_each_rcu here instead, but this should
+	 * be fine as well.
+	 */
+	spin_lock(&sb_nosymfollow_hashtable_spinlock);
+	hash_for_each_possible_safe(sb_nosymfollow_hashtable, entry,
+			   hlist_node, next, sb_pointer) {
+		if (entry->sb == sb_pointer) {
+			hash_del_rcu(&entry->next);
+			free_entry = true;
+			break;
+		}
+	}
+	spin_unlock(&sb_nosymfollow_hashtable_spinlock);
+	if (free_entry) {
+		synchronize_rcu();
+		kfree(entry);
+	}
+}
+
+int chromiumos_security_sb_umount(struct vfsmount *mnt, int flags)
+{
+	/* If mnt->mnt_sb is in nosymfollow hashtable, remove it. */
+	chromiumos_remove_sb_nosymfollow_hashtable(mnt->mnt_sb);
+
+	return 0;
+}
+
 static DEFINE_SPINLOCK(process_setuid_policy_hashtable_spinlock);
 
+/*
+ * NOTE: The WARN() calls will emit a warning in cases of blocked symlink
+ * traversal attempts. These will show up in kernel warning reports
+ * collected by the crash reporter, so we have some insight on spurious
+ * failures that need addressing.
+ */
 static int chromiumos_security_inode_follow_link(struct dentry *dentry,
 						 struct inode *inode, bool rcu)
 {
 	static char accessed_path[PATH_MAX];
 	enum chromiumos_inode_security_policy policy;
 
+	/* Deny if symlinks have been disabled on this superblock. */
+	if (chromiumos_check_sb_nosymfollow_hashtable(dentry->d_sb)) {
+		WARN(1,
+		     "Blocked symlink traversal for path %x:%x:%s (symlinks were disabled on this FS through the 'nosymfollow' mount option)\n",
+		     MAJOR(dentry->d_sb->s_dev),
+		     MINOR(dentry->d_sb->s_dev),
+		     dentry_path(dentry, accessed_path, PATH_MAX));
+		return -EACCES;
+	}
+
 	policy = chromiumos_get_inode_security_policy(
 		dentry, inode,
 		CHROMIUMOS_SYMLINK_TRAVERSAL);
 
-	/*
-	 * Emit a warning in cases of blocked symlink traversal attempts. These
-	 * will show up in kernel warning reports collected by the crash
-	 * reporter, so we have some insight on spurious failures that need
-	 * addressing.
-	 */
 	WARN(policy == CHROMIUMOS_INODE_POLICY_BLOCK,
 	     "Blocked symlink traversal for path %x:%x:%s (see https://goo.gl/8xICW6 for context and rationale)\n",
 	     MAJOR(dentry->d_sb->s_dev), MINOR(dentry->d_sb->s_dev),
@@ -340,6 +483,146 @@ int chromiumos_security_capable(const struct cred *cred,
 	return 0;
 }
 
+struct chromiumos_mnt_opts {
+	/* Must be LSM_OPT_MAGIC */
+	uint64_t magic;
+	int nosymfollow;
+};
+
+/*
+ * We use the fact that the Chromium LSM is stacked in front of SELinux
+ * to allocate a buffer big enough to store the SELinux selinux_mnt_opts
+ * and the chromiumos_mnt_opts. We do this because *mnt_opts is shared
+ * between all the LSMs without a way of coordinating and sharing
+ * storage. This means that the ChromiumOS LSM needs to be the one that
+ * allocates the memory.
+ *
+ * There is a catch to this trick. SELinux must be initialized before the
+ * *mnt_opts can be set. Otherwise SELinux will complain. This means we can
+ * only use nosymfollow after SELinux has started.
+ *
+ * We use the magic value to determine if the ChromiumOS LSM was the one that
+ * allocated the buffer and if our options are present.
+ */
+int get_chromiumos_mnt_opts(void **mnt_opts, struct chromiumos_mnt_opts **opts)
+{
+	void *data = *mnt_opts;
+
+	if (!data) {
+		data = kzalloc(PAGE_SIZE, GFP_KERNEL);
+		if (!data)
+			return -ENOMEM;
+
+		*mnt_opts = data;
+		*opts = (struct chromiumos_mnt_opts *)((uintptr_t)data +
+						       LSM_OPTS_OFFSET);
+		(*opts)->magic = LSM_OPT_MAGIC;
+	} else {
+		*opts = (struct chromiumos_mnt_opts *)((uintptr_t)data +
+						       LSM_OPTS_OFFSET);
+
+		/*
+		 * Check to see if we allocated the buffer. If this fails that
+		 * means something was stacked in front of this module.
+		 */
+		if ((*opts)->magic != LSM_OPT_MAGIC)
+			panic("ChromiumOS LSM must be first in the stack!");
+	}
+
+	return 0;
+}
+
+int chromiumos_sb_eat_lsm_opts(char *orig, void **mnt_opts)
+{
+	int rc;
+	char *orig_copy;
+	char *orig_copy_cur;
+	char *option;
+	size_t offset = 0;
+	bool found = false;
+	struct chromiumos_mnt_opts *opts;
+
+	if (!orig || *orig == 0)
+		return 0;
+
+	orig_copy = (char *)get_zeroed_page(GFP_KERNEL);
+	if (!orig_copy)
+		return -ENOMEM;
+	strncpy(orig_copy, orig, PAGE_SIZE);
+
+	memset(orig, 0, strlen(orig));
+
+	orig_copy_cur = orig_copy;
+	while (orig_copy_cur) {
+		option = strsep(&orig_copy_cur, ",");
+		if (strcmp(option, "nosymfollow") == 0) {
+			if (found) /* Found multiple times. */
+				return -EINVAL;
+			found = true;
+		} else {
+			if (offset > 0) {
+				orig[offset] = ',';
+				offset++;
+			}
+			strcpy(orig + offset, option);
+			offset += strlen(option);
+		}
+	}
+
+	if (found) {
+		rc = get_chromiumos_mnt_opts(mnt_opts, &opts);
+		if (rc)
+			return rc;
+		opts->nosymfollow = 1;
+	}
+
+	free_page((unsigned long)orig_copy);
+	return 0;
+}
+
+static void chromiumos_sb_free_mnt_opts(void *mnt_opts)
+{
+	/* We let SELinux free the mnt_opts */
+	return;
+}
+
+enum {
+	Opt_error = -1,
+	Opt_nosymfollow = 0,
+};
+
+static const struct fs_parameter_spec chromiumos_param_specs[] = {
+	fsparam_bool("symfollow",	Opt_nosymfollow),
+	{}
+};
+
+static const struct fs_parameter_description chromiumos_fs_parameters = {
+	.name		= "ChromiumOS",
+	.specs		= chromiumos_param_specs,
+};
+
+static int chromiumos_fs_context_parse_param(struct fs_context *fc,
+					  struct fs_parameter *param)
+{
+	struct fs_parse_result result;
+	int opt, rc;
+	struct chromiumos_mnt_opts *opts;
+
+	opt = fs_parse(fc, &chromiumos_fs_parameters, param, &result);
+
+	if (opt < 0)
+		return opt;
+
+	rc = get_chromiumos_mnt_opts(&fc->security, &opts);
+	if (rc)
+		return rc;
+
+	if (opt == Opt_nosymfollow)
+		opts->nosymfollow = !result.boolean;
+
+	return 0;
+}
+
 /*
  * Emit a warning when no entry found in whitelist. These will show up in
  * kernel warning reports collected by the crash reporter, so we have some
@@ -464,12 +747,39 @@ int chromiumos_security_task_fix_setuid(struct cred *new,
 	return 0;
 }
 
+int chromiumos_sb_set_mnt_opts(struct super_block *sb, void *mnt_opts,
+			       unsigned long kern_flags,
+			       unsigned long *set_kern_flags)
+{
+	int ret;
+	struct chromiumos_mnt_opts *opts;
+
+	if (!mnt_opts)
+		return 0;
+
+	ret = get_chromiumos_mnt_opts(&mnt_opts, &opts);
+	if (ret)
+		return ret;
+
+	if (opts->nosymfollow)
+		ret = chromiumos_add_sb_nosymfollow_hashtable(sb);
+	else
+		chromiumos_remove_sb_nosymfollow_hashtable(sb);
+
+	return ret;
+}
+
 static struct security_hook_list chromiumos_security_hooks[] = {
 	LSM_HOOK_INIT(sb_mount, chromiumos_security_sb_mount),
 	LSM_HOOK_INIT(inode_follow_link, chromiumos_security_inode_follow_link),
 	LSM_HOOK_INIT(file_open, chromiumos_security_file_open),
 	LSM_HOOK_INIT(capable, chromiumos_security_capable),
 	LSM_HOOK_INIT(task_fix_setuid, chromiumos_security_task_fix_setuid),
+	LSM_HOOK_INIT(sb_eat_lsm_opts, chromiumos_sb_eat_lsm_opts),
+	LSM_HOOK_INIT(fs_context_parse_param, chromiumos_fs_context_parse_param),
+	LSM_HOOK_INIT(sb_free_mnt_opts, chromiumos_sb_free_mnt_opts),
+	LSM_HOOK_INIT(sb_set_mnt_opts, chromiumos_sb_set_mnt_opts),
+	LSM_HOOK_INIT(sb_umount, chromiumos_security_sb_umount)
 };
 
 /* Add process management policy to hash table */
-- 
2.23.0.187.g17f5b7556c-goog

