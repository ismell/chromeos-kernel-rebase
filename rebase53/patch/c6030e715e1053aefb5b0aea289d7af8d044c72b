From edee250288d3c8fc788be328be19912ee822f8d2 Mon Sep 17 00:00:00 2001
From: Shanth Murthy <shanth.murthy@intel.com>
Date: Sat, 18 Feb 2017 02:22:12 -0800
Subject: [PATCH] FROMLIST: platform/x86: intel_pmc_ipc: Use XTAL freq based on
 cpuid

This patch uses crystal frequency based on the cpu model.

On Apollo Lake SoC we have 19.2 MHz clock frequency for counting S0ix
residency but this clock frequency might change on future platforms
depending on the crystal oscillator.

BUG=chrome-os-partner:57313
TEST=Check S0ix residency by calling intel_pmc_read_s0ix_residency() API.

Change-Id: Ia586c5db5a527222bb5edad429bb9044552d511e
Signed-off-by: Rajneesh Bhardwaj <rajneesh.bhardwaj@intel.com>
Signed-off-by: Shanth Murthy <shanth.murthy@intel.com>
(am from https://lkml.org/lkml/2017/2/17/146)
Reviewed-on: https://chromium-review.googlesource.com/444667
Reviewed-by: Aaron Durbin <adurbin@chromium.org>
Reviewed-by: Benson Leung <bleung@chromium.org>

Conflicts:
	drivers/platform/x86/intel_pmc_ipc.c

[rebase412(groeck): Context changes, INTEL_FAM6_ATOM_GOLDMONT define
	now available in infrastructure]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

Conflicts:
	drivers/platform/x86/intel_pmc_ipc.c

[rebase414(groeck): Resolve context conflict]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

[rebase419(rrangel): Merged in 1e1c777f11ad023c3eaf179f57d3902e414a1999]
Signed-off-by: Raul E Rangel <rrangel@chromium.org>
---
 drivers/platform/x86/intel_pmc_ipc.c | 31 +++++++++++++++++++++++-----
 1 file changed, 26 insertions(+), 5 deletions(-)

diff --git a/drivers/platform/x86/intel_pmc_ipc.c b/drivers/platform/x86/intel_pmc_ipc.c
index 55037ff258f8..aa6b51ab2d37 100644
--- a/drivers/platform/x86/intel_pmc_ipc.c
+++ b/drivers/platform/x86/intel_pmc_ipc.c
@@ -30,6 +30,7 @@
 #include <linux/spinlock.h>
 #include <linux/suspend.h>
 
+#include <asm/intel-family.h>
 #include <asm/intel_pmc_ipc.h>
 
 #include <linux/platform_data/itco_wdt.h>
@@ -53,11 +54,11 @@
 #define IPC_WRITE_BUFFER	0x80
 #define IPC_READ_BUFFER		0x90
 
-/* Residency with clock rate at 19.2MHz to usecs */
-#define S0IX_RESIDENCY_IN_USECS(d, s)		\
+/* Convert S0ix residency to usecs based on XTAL frequency */
+#define S0IX_RESIDENCY_IN_USECS(d, s, x)	\
 ({						\
-	u64 result = 10ull * ((d) + (s));	\
-	do_div(result, 192);			\
+	u64 result = 1000ull * ((d) + (s));	\
+	do_div(result, (x));			\
 	result;					\
 })
 
@@ -128,6 +129,7 @@ static struct intel_pmc_ipc_dev {
 	void __iomem *gcr_mem_base;
 	bool has_gcr_regs;
 	spinlock_t gcr_lock;
+	u32 xtal_khz;
 
 	/* punit */
 	struct platform_device *punit_dev;
@@ -349,6 +351,19 @@ static int update_no_reboot_bit(void *priv, bool set)
 				    PMC_CFG_NO_REBOOT_MASK, value);
 }
 
+static int get_xtal_clock_freq(void)
+{
+	switch (boot_cpu_data.x86_model) {
+	case INTEL_FAM6_ATOM_GOLDMONT:
+	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
+		ipcdev.xtal_khz = 19200;
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
 static int intel_pmc_ipc_check_status(void)
 {
 	int status;
@@ -912,7 +927,7 @@ int intel_pmc_s0ix_counter_read(u64 *data)
 	deep = gcr_data_readq(PMC_GCR_TELEM_DEEP_S0IX_REG);
 	shlw = gcr_data_readq(PMC_GCR_TELEM_SHLW_S0IX_REG);
 
-	*data = S0IX_RESIDENCY_IN_USECS(deep, shlw);
+	*data = S0IX_RESIDENCY_IN_USECS(deep, shlw, ipcdev.xtal_khz);
 
 	return 0;
 }
@@ -960,6 +975,12 @@ static int ipc_plat_probe(struct platform_device *pdev)
 		goto err_irq;
 	}
 
+	ret = get_xtal_clock_freq();
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to get XTAL freq\n");
+		goto err_sys;
+	}
+
 	ret = sysfs_create_group(&pdev->dev.kobj, &intel_ipc_group);
 	if (ret) {
 		dev_err(&pdev->dev, "Failed to create sysfs group %d\n",
-- 
2.23.0.187.g17f5b7556c-goog

