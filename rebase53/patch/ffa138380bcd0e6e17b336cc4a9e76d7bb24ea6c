From 22243a4f9eb70bb77ae8e931d45d703d50c2b004 Mon Sep 17 00:00:00 2001
From: Vincent Palatin <vpalatin@chromium.org>
Date: Fri, 24 Nov 2017 15:38:26 +0100
Subject: [PATCH] CHROMIUM: cros_ec: add a poll handler

Allow to poll on the cros_ec device to receive the MKBP events.
The /dev/cros_{ec|fp|..} file operations now implements the poll
operation.
The userspace can now receive specific MKBP events by doing the
following:
- open the /dev/cros_XX file.
- call the CROS_EC_DEV_IOCEVENTMASK ioctl with the bitmap of the MKBP
  events it wishes to receive as argument.
- poll on the file descriptor.
- when it gets POLLIN, do a read on the file descriptor, the first
  queued event will be returned (using the struct
  ec_response_get_next_event format: one byte of event type, then
  the payload).

The read() operation returns at most one event even if there are several
queued, and it might be truncated if the buffer is smaller than the
event (but the caller should know the maximum size of the events it is
reading).
read() used to return the EC version string, it still does it when no
event mask or an empty event is set for backward compatibility (despite
nobody really using this feature).

This will be used by the userspace daemon to receive and treat the
EC_MKBP_EVENT_FINGERPRINT  sent by the FP MCU.

Signed-off-by: Vincent Palatin <vpalatin@chromium.org>

BUG=b:69460856, b:71986991
TEST=manual, run on Eve EVT and generate FP MCU events with an updated
ectool.

Change-Id: I671d530b4139651275a3c56770c38fa8fc697543
Reviewed-on: https://chromium-review.googlesource.com/806115
Commit-Ready: Vincent Palatin <vpalatin@chromium.org>
Tested-by: Vincent Palatin <vpalatin@chromium.org>
Reviewed-by: Dmitry Torokhov <dtor@chromium.org>

Conflicts:
	drivers/mfd/cros_ec_dev.c

[rebase419(groeck): Context conflicts]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

[rebase53(rrangel): Context conflict]
Signed-off-by: Raul E Rangel <rrangel@chromium.org>
---
 drivers/mfd/cros_ec_dev.c | 163 +++++++++++++++++++++++++++++++++++++-
 drivers/mfd/cros_ec_dev.h |   1 +
 2 files changed, 160 insertions(+), 4 deletions(-)

diff --git a/drivers/mfd/cros_ec_dev.c b/drivers/mfd/cros_ec_dev.c
index 41dccced5026..b5e3375f54a6 100644
--- a/drivers/mfd/cros_ec_dev.c
+++ b/drivers/mfd/cros_ec_dev.c
@@ -9,9 +9,11 @@
 #include <linux/mfd/core.h>
 #include <linux/module.h>
 #include <linux/mod_devicetable.h>
+#include <linux/notifier.h>
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
 #include <linux/pm.h>
+#include <linux/poll.h>
 #include <linux/slab.h>
 #include <linux/uaccess.h>
 
@@ -108,30 +110,178 @@ static int cros_ec_check_features(struct cros_ec_dev *ec, int feature)
 	return ec->features[feature / 32] & EC_FEATURE_MASK_0(feature);
 }
 
+struct cros_ec_priv {
+	struct cros_ec_dev *ec;
+	struct notifier_block notifier;
+	struct list_head events;
+	wait_queue_head_t wait_event;
+	unsigned long event_mask;
+	size_t event_len;
+};
+
+struct ec_priv_event {
+	struct list_head node;
+	size_t size;
+	uint8_t event_type;
+	u8 data[0];
+};
+
+/* Arbitrary bounded size for the event queue */
+#define MAX_EVENT_LEN PAGE_SIZE
+
+static int ec_device_mkbp_event(struct notifier_block *nb,
+	unsigned long queued_during_suspend, void *_notify)
+{
+	struct cros_ec_priv *priv = container_of(nb, struct cros_ec_priv,
+						 notifier);
+	struct cros_ec_device *ec_dev = priv->ec->ec_dev;
+	struct ec_priv_event *event;
+	unsigned long event_bit = 1 << ec_dev->event_data.event_type;
+	int total_size = sizeof(struct ec_priv_event) + ec_dev->event_size;
+
+	if (!(event_bit & priv->event_mask) ||
+	    (priv->event_len + total_size) > MAX_EVENT_LEN)
+		return NOTIFY_DONE;
+
+	event = kzalloc(total_size, GFP_KERNEL);
+	if (!event)
+		return NOTIFY_DONE;
+
+	event->size = ec_dev->event_size;
+	event->event_type = ec_dev->event_data.event_type;
+	memcpy(event->data, &ec_dev->event_data.data, ec_dev->event_size);
+
+	spin_lock(&priv->wait_event.lock);
+	list_add_tail(&event->node, &priv->events);
+	priv->event_len += total_size;
+	wake_up_locked(&priv->wait_event);
+	spin_unlock(&priv->wait_event.lock);
+
+	return NOTIFY_OK;
+}
+
 /* Device file ops */
 static int ec_device_open(struct inode *inode, struct file *filp)
 {
 	struct cros_ec_dev *ec = container_of(inode->i_cdev,
 					      struct cros_ec_dev, cdev);
-	filp->private_data = ec;
+	int retval;
+	struct cros_ec_priv *priv = kzalloc(sizeof(struct cros_ec_priv),
+					    GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	priv->ec = ec;
+	filp->private_data = priv;
+	INIT_LIST_HEAD(&priv->events);
+	init_waitqueue_head(&priv->wait_event);
 	nonseekable_open(inode, filp);
-	return 0;
+
+	priv->notifier.notifier_call = ec_device_mkbp_event;
+	retval = blocking_notifier_chain_register(&ec->ec_dev->event_notifier,
+						  &priv->notifier);
+	if (retval) {
+		dev_err(ec->dev, "failed to register event notifier\n");
+		kfree(priv);
+	}
+
+	return retval;
+}
+
+static unsigned int ec_device_poll(struct file *filp, poll_table *wait)
+{
+	struct cros_ec_priv *priv = filp->private_data;
+
+	poll_wait(filp, &priv->wait_event, wait);
+
+	if (list_empty(&priv->events))
+		return 0;
+
+	return POLLIN | POLLRDNORM;
 }
 
 static int ec_device_release(struct inode *inode, struct file *filp)
 {
+	struct cros_ec_priv *priv = filp->private_data;
+	struct cros_ec_dev *ec = priv->ec;
+	struct ec_priv_event *evt, *tmp;
+
+	blocking_notifier_chain_unregister(&ec->ec_dev->event_notifier,
+					   &priv->notifier);
+	list_for_each_entry_safe(evt, tmp, &priv->events, node) {
+		list_del(&evt->node);
+		kfree(evt);
+	}
+	kfree(priv);
+
 	return 0;
 }
 
+static struct ec_priv_event *ec_fetch_event(struct cros_ec_priv *priv,
+					    bool fetch, bool block)
+{
+	struct ec_priv_event *event;
+	int error;
+
+	spin_lock(&priv->wait_event.lock);
+	if (!block && list_empty(&priv->events)) {
+		event = ERR_PTR(-EWOULDBLOCK);
+		goto out;
+	}
+	if (!fetch) {
+		event = NULL;
+		goto out;
+	}
+	error = wait_event_interruptible_locked(priv->wait_event,
+						!list_empty(&priv->events));
+	if (error) {
+		event = ERR_PTR(error);
+		goto out;
+	}
+	event = list_first_entry(&priv->events, struct ec_priv_event, node);
+	list_del(&event->node);
+	priv->event_len -= event->size + sizeof(struct ec_priv_event);
+out:
+	spin_unlock(&priv->wait_event.lock);
+	return event;
+}
+
+
 static ssize_t ec_device_read(struct file *filp, char __user *buffer,
 			      size_t length, loff_t *offset)
 {
-	struct cros_ec_dev *ec = filp->private_data;
+	struct cros_ec_priv *priv = filp->private_data;
+	struct cros_ec_dev *ec = priv->ec;
 	char msg[sizeof(struct ec_response_get_version) +
 		 sizeof(CROS_EC_DEV_VERSION)];
 	size_t count;
 	int ret;
 
+
+	if (priv->event_mask) { /* queued MKBP event */
+		struct ec_priv_event *event;
+
+		event = ec_fetch_event(priv, length != 0,
+				       !(filp->f_flags & O_NONBLOCK));
+		if (IS_ERR(event))
+			return PTR_ERR(event);
+		/*
+		 * length == 0 is special - no IO is done but we check
+		 * for error conditions.
+		 */
+		if (length == 0)
+			return 0;
+
+		/* the event is 1 byte of type plus the payload */
+		count = min(length, event->size + 1);
+		ret = copy_to_user(buffer, &event->event_type, count);
+		kfree(event);
+		if (ret) /* the copy failed */
+			return -EFAULT;
+		*offset = count;
+		return count;
+	}
+	/* legacy behavior if no event mask is defined */
 	if (*offset != 0)
 		return 0;
 
@@ -218,7 +368,8 @@ static long ec_device_ioctl_readmem(struct cros_ec_dev *ec, void __user *arg)
 static long ec_device_ioctl(struct file *filp, unsigned int cmd,
 			    unsigned long arg)
 {
-	struct cros_ec_dev *ec = filp->private_data;
+	struct cros_ec_priv *priv = filp->private_data;
+	struct cros_ec_dev *ec = priv->ec;
 
 	if (_IOC_TYPE(cmd) != CROS_EC_DEV_IOC)
 		return -ENOTTY;
@@ -228,6 +379,9 @@ static long ec_device_ioctl(struct file *filp, unsigned int cmd,
 		return ec_device_ioctl_xcmd(ec, (void __user *)arg);
 	case CROS_EC_DEV_IOCRDMEM:
 		return ec_device_ioctl_readmem(ec, (void __user *)arg);
+	case CROS_EC_DEV_IOCEVENTMASK:
+		priv->event_mask = arg;
+		return 0;
 	}
 
 	return -ENOTTY;
@@ -236,6 +390,7 @@ static long ec_device_ioctl(struct file *filp, unsigned int cmd,
 /* Module initialization */
 static const struct file_operations fops = {
 	.open = ec_device_open,
+	.poll = ec_device_poll,
 	.release = ec_device_release,
 	.read = ec_device_read,
 	.unlocked_ioctl = ec_device_ioctl,
diff --git a/drivers/mfd/cros_ec_dev.h b/drivers/mfd/cros_ec_dev.h
index 7a42c3ef50e4..53e1f7a4b0fb 100644
--- a/drivers/mfd/cros_ec_dev.h
+++ b/drivers/mfd/cros_ec_dev.h
@@ -31,5 +31,6 @@ struct cros_ec_readmem {
 #define CROS_EC_DEV_IOC       0xEC
 #define CROS_EC_DEV_IOCXCMD   _IOWR(CROS_EC_DEV_IOC, 0, struct cros_ec_command)
 #define CROS_EC_DEV_IOCRDMEM  _IOWR(CROS_EC_DEV_IOC, 1, struct cros_ec_readmem)
+#define CROS_EC_DEV_IOCEVENTMASK _IO(CROS_EC_DEV_IOC, 2)
 
 #endif /* _CROS_EC_DEV_H_ */
-- 
2.23.0.187.g17f5b7556c-goog

