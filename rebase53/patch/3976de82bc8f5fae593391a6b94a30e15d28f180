From 9fabebe4dad103825f6d61c010de92e9e40139d9 Mon Sep 17 00:00:00 2001
From: Daniel Rosenberg <drosen@google.com>
Date: Mon, 28 Aug 2017 15:46:49 -0700
Subject: [PATCH] CHROMIUM: esdfs: Clean up for Android

Minor code cleanup to make it play nicely with our
tree. Some names are changed to avoid collisions
with sdcardfs, and the case insensitive lookups
are moved inside esdfs to avoid needing to asjust
all possible lower filesystems. Removed selinux
overriding. A few minor checkpatch fixes.

* Fix-up for 4.14: use dir_context for name match

 Conflicts:
       include/uapi/linux/magic.h

BUG=b:63876697
TEST=compilation, mount esdfs

Signed-off-by: Daniel Rosenberg <drosen@google.com>
Change-Id: I4ad7f3f6d1f110c4b0502259e1436bde8a2fac29
Reviewed-on: https://chromium-review.googlesource.com/791976
Commit-Ready: Sarthak Kukreti <sarthakkukreti@chromium.org>
Tested-by: Sarthak Kukreti <sarthakkukreti@chromium.org>
Reviewed-by: Gwendal Grignou <gwendal@chromium.org>
(cherry picked from commit 420a006d7a8e722985d5c090627e95890e277780)
Reviewed-on: https://chromium-review.googlesource.com/963410

[rebase419(groeck): Context conflicts; sdardfs support removed]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

[rebase53(rrangel): Context conflict]
Signed-off-by: Raul E Rangel <rrangel@chromium.org>
---
 fs/Kconfig                 |   1 +
 fs/Makefile                |   1 +
 fs/esdfs/dentry.c          |   4 +-
 fs/esdfs/derive.c          |   6 +-
 fs/esdfs/esdfs.h           |  57 +++--------------
 fs/esdfs/file.c            |   1 +
 fs/esdfs/inode.c           |   1 +
 fs/esdfs/lookup.c          | 123 ++++++++++++++++++-------------------
 fs/esdfs/main.c            |  25 ++++----
 fs/esdfs/mmap.c            |   1 +
 fs/esdfs/super.c           |   1 +
 include/uapi/linux/magic.h |   2 +
 12 files changed, 97 insertions(+), 126 deletions(-)

diff --git a/fs/Kconfig b/fs/Kconfig
index fd08690573d0..a73af48ce53e 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -241,6 +241,7 @@ source "fs/orangefs/Kconfig"
 source "fs/adfs/Kconfig"
 source "fs/affs/Kconfig"
 source "fs/ecryptfs/Kconfig"
+source "fs/esdfs/Kconfig"
 source "fs/sdcardfs/Kconfig"
 source "fs/hfs/Kconfig"
 source "fs/hfsplus/Kconfig"
diff --git a/fs/Makefile b/fs/Makefile
index b54f564755dc..a98ccb5b9994 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -86,6 +86,7 @@ obj-$(CONFIG_ISO9660_FS)	+= isofs/
 obj-$(CONFIG_HFSPLUS_FS)	+= hfsplus/ # Before hfs to find wrapped HFS+
 obj-$(CONFIG_HFS_FS)		+= hfs/
 obj-$(CONFIG_ECRYPT_FS)		+= ecryptfs/
+obj-$(CONFIG_ESD_FS)		+= esdfs/
 obj-$(CONFIG_SDCARD_FS)		+= sdcardfs/
 obj-$(CONFIG_VXFS_FS)		+= freevxfs/
 obj-$(CONFIG_NFS_FS)		+= nfs/
diff --git a/fs/esdfs/dentry.c b/fs/esdfs/dentry.c
index 8386bf6806c7..ec3a870d073d 100644
--- a/fs/esdfs/dentry.c
+++ b/fs/esdfs/dentry.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -139,8 +140,7 @@ static void esdfs_d_release(struct dentry *dentry)
 	/* release and reset the lower paths */
 	esdfs_put_reset_lower_paths(dentry);
 	esdfs_release_lower_parent(dentry);
-	free_dentry_private_data(dentry);
-	return;
+	esdfs_free_dentry_private_data(dentry);
 }
 
 const struct dentry_operations esdfs_dops = {
diff --git a/fs/esdfs/derive.c b/fs/esdfs/derive.c
index b7769913d665..9a680d44f6b8 100644
--- a/fs/esdfs/derive.c
+++ b/fs/esdfs/derive.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2013-2014 Motorola Mobility LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -19,7 +20,6 @@
 #include <linux/ctype.h>
 #include <linux/vmalloc.h>
 #include <linux/uaccess.h>
-#include "../internal.h"
 #include "esdfs.h"
 
 #define PKG_NAME_MAX		128
@@ -461,8 +461,8 @@ static int lookup_link_source(struct dentry *dentry, struct dentry *parent)
 	esdfs_get_lower_path(parent, &lower_parent_path);
 
 	/* Check if the stub user profile obb is there. */
-	err = vfs_path_lookup(lower_parent_path.dentry, lower_parent_path.mnt,
-			      dentry->d_name.name, LOOKUP_NOCASE, &lower_path);
+	err = esdfs_lookup_nocase(&lower_parent_path, &dentry->d_name,
+					&lower_path);
 	/* Remember it to handle renames and removal. */
 	if (!err)
 		esdfs_set_lower_stub_path(dentry, &lower_path);
diff --git a/fs/esdfs/esdfs.h b/fs/esdfs/esdfs.h
index c21424e38ccb..35188e0e1df9 100644
--- a/fs/esdfs/esdfs.h
+++ b/fs/esdfs/esdfs.h
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -29,6 +30,7 @@
 #include <linux/slab.h>
 #include <linux/sched.h>
 #include <linux/fs_struct.h>
+#include <linux/pkglist.h>
 #include <uapi/linux/mount.h>
 
 #include "../internal.h"
@@ -114,8 +116,8 @@ extern int esdfs_init_inode_cache(void);
 extern void esdfs_destroy_inode_cache(void);
 extern int esdfs_init_dentry_cache(void);
 extern void esdfs_destroy_dentry_cache(void);
-extern int new_dentry_private_data(struct dentry *dentry);
-extern void free_dentry_private_data(struct dentry *dentry);
+extern int esdfs_new_dentry_private_data(struct dentry *dentry);
+extern void esdfs_free_dentry_private_data(struct dentry *dentry);
 extern struct dentry *esdfs_lookup(struct inode *dir, struct dentry *dentry,
 				   unsigned int flags);
 extern struct inode *esdfs_iget(struct super_block *sb,
@@ -131,6 +133,8 @@ extern int esdfs_derived_revalidate(struct dentry *dentry,
 				    struct dentry *parent);
 extern int esdfs_check_derived_permission(struct inode *inode, int mask);
 extern int esdfs_derive_mkdir_contents(struct dentry *dentry);
+extern int esdfs_lookup_nocase(struct path *lower_parent_path,
+		struct qstr *name, struct path *lower_path);
 
 /* file private data */
 struct esdfs_file_info {
@@ -151,7 +155,7 @@ struct esdfs_inode_info {
 	struct inode vfs_inode;
 	unsigned version;	/* package list version this was derived from */
 	int tree;		/* storage tree location */
-	uid_t userid;		/* Android User ID (not Linux UID) */
+	uint32_t userid;	/* Android User ID (not Linux UID) */
 	uid_t appid;		/* Linux UID for this app/user combo */
 };
 
@@ -168,7 +172,6 @@ struct esdfs_sb_info {
 	struct super_block *lower_sb;
 	struct super_block *s_sb;
 	struct list_head s_list;
-	u32 lower_secid;
 	struct esdfs_perms lower_perms;
 	struct esdfs_perms upper_perms;	/* root in derived mode */
 	struct dentry *obb_parent;	/* pinned dentry for obb link parent */
@@ -264,7 +267,6 @@ static inline void esdfs_get_lower_path(const struct dentry *dent,
 	pathcpy(lower_path, &ESDFS_D(dent)->lower_path);
 	path_get(lower_path);
 	spin_unlock(&ESDFS_D(dent)->lock);
-	return;
 }
 static inline void esdfs_get_lower_stub_path(const struct dentry *dent,
 					     struct path *lower_stub_path)
@@ -273,13 +275,11 @@ static inline void esdfs_get_lower_stub_path(const struct dentry *dent,
 	pathcpy(lower_stub_path, &ESDFS_D(dent)->lower_stub_path);
 	path_get(lower_stub_path);
 	spin_unlock(&ESDFS_D(dent)->lock);
-	return;
 }
 static inline void esdfs_put_lower_path(const struct dentry *dent,
 					 struct path *lower_path)
 {
 	path_put(lower_path);
-	return;
 }
 static inline void esdfs_set_lower_path(const struct dentry *dent,
 					 struct path *lower_path)
@@ -287,7 +287,6 @@ static inline void esdfs_set_lower_path(const struct dentry *dent,
 	spin_lock(&ESDFS_D(dent)->lock);
 	pathcpy(&ESDFS_D(dent)->lower_path, lower_path);
 	spin_unlock(&ESDFS_D(dent)->lock);
-	return;
 }
 static inline void esdfs_set_lower_stub_path(const struct dentry *dent,
 					     struct path *lower_stub_path)
@@ -295,7 +294,6 @@ static inline void esdfs_set_lower_stub_path(const struct dentry *dent,
 	spin_lock(&ESDFS_D(dent)->lock);
 	pathcpy(&ESDFS_D(dent)->lower_stub_path, lower_stub_path);
 	spin_unlock(&ESDFS_D(dent)->lock);
-	return;
 }
 static inline void esdfs_put_reset_lower_paths(const struct dentry *dent)
 {
@@ -316,7 +314,6 @@ static inline void esdfs_put_reset_lower_paths(const struct dentry *dent)
 	path_put(&lower_path);
 	if (lower_stub_path.dentry)
 		path_put(&lower_stub_path);
-	return;
 }
 static inline void esdfs_get_lower_parent(const struct dentry *dent,
 					  struct dentry *lower_dentry,
@@ -331,18 +328,17 @@ static inline void esdfs_get_lower_parent(const struct dentry *dent,
 	spin_unlock(&ESDFS_D(dent)->lock);
 	if (!*lower_parent)
 		*lower_parent = dget_parent(lower_dentry);
-	return;
 }
 static inline void esdfs_put_lower_parent(const struct dentry *dent,
 					  struct dentry **lower_parent)
 {
 	dput(*lower_parent);
-	return;
 }
 static inline void esdfs_set_lower_parent(const struct dentry *dent,
 					  struct dentry *parent)
 {
 	struct dentry *old_parent = NULL;
+
 	spin_lock(&ESDFS_D(dent)->lock);
 	if (ESDFS_DENTRY_IS_LINKED(dent))
 		old_parent = ESDFS_D(dent)->real_parent;
@@ -351,11 +347,11 @@ static inline void esdfs_set_lower_parent(const struct dentry *dent,
 	spin_unlock(&ESDFS_D(dent)->lock);
 	if (old_parent)
 		dput(old_parent);
-	return;
 }
 static inline void esdfs_release_lower_parent(const struct dentry *dent)
 {
 	struct dentry *real_parent = NULL;
+
 	spin_lock(&ESDFS_D(dent)->lock);
 	if (ESDFS_DENTRY_IS_LINKED(dent)) {
 		real_parent = ESDFS_D(dent)->real_parent;
@@ -364,13 +360,13 @@ static inline void esdfs_release_lower_parent(const struct dentry *dent)
 	spin_unlock(&ESDFS_D(dent)->lock);
 	if (real_parent)
 		dput(real_parent);
-	return;
 }
 
 /* locking helpers */
 static inline struct dentry *lock_parent(struct dentry *dentry)
 {
 	struct dentry *dir = dget_parent(dentry);
+
 	inode_lock_nested(dir->d_inode, I_MUTEX_PARENT);
 	return dir;
 }
@@ -406,7 +402,6 @@ static inline void esdfs_set_perms(struct inode *inode)
 	else
 		inode->i_mode = (inode->i_mode & S_IFMT) |
 				sbi->upper_perms.fmask;
-	return;
 }
 
 static inline void esdfs_revalidate_perms(struct dentry *dentry)
@@ -439,37 +434,6 @@ static inline void esdfs_copy_attr(struct inode *dest, const struct inode *src)
 	esdfs_set_perms(dest);
 }
 
-#ifdef CONFIG_SECURITY_SELINUX
-/*
- * Hard-code the lower source context to prevent anyone with mount permissions
- * from doing something nasty.
- */
-#define ESDFS_LOWER_SECCTX "u:r:sdcardd:s0"
-
-/*
- * Hack to be able to poke at the SID.  The Linux Security API does not provide
- * a way to change just the SID in the creds (probably on purpose).
- */
-struct task_security_struct {
-	u32 osid;		/* SID prior to last execve */
-	u32 sid;		/* current SID */
-	u32 exec_sid;		/* exec SID */
-	u32 create_sid;		/* fscreate SID */
-	u32 keycreate_sid;	/* keycreate SID */
-	u32 sockcreate_sid;	/* fscreate SID */
-};
-static inline void esdfs_override_secid(struct esdfs_sb_info *sbi,
-					struct cred *creds)
-{
-	struct task_security_struct *tsec = creds->security;
-
-	if (sbi->lower_secid)
-		tsec->sid = sbi->lower_secid;
-}
-#else
-static inline void esdfs_override_secid(struct esdfs_sb_info *sbi,
-					struct cred *creds) {}
-#endif
 /*
  * Based on nfs4_save_creds() and nfs4_reset_creds() in nfsd/nfs4recover.c.
  * Returns NULL if prepare_creds() could not allocate heap, otherwise
@@ -490,7 +454,6 @@ static inline const struct cred *esdfs_override_creds(
 
 	creds->fsuid = make_kuid(&init_user_ns, sbi->lower_perms.uid);
 	creds->fsgid = make_kgid(&init_user_ns, sbi->lower_perms.gid);
-	esdfs_override_secid(sbi, creds);
 
 	/* this installs the new creds into current, which we must destroy */
 	return override_creds(creds);
diff --git a/fs/esdfs/file.c b/fs/esdfs/file.c
index 233045c787b3..38a5d49b4dfa 100644
--- a/fs/esdfs/file.c
+++ b/fs/esdfs/file.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014, 2016 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
diff --git a/fs/esdfs/inode.c b/fs/esdfs/inode.c
index 3e8d5338b069..14e769d3e2d9 100644
--- a/fs/esdfs/inode.c
+++ b/fs/esdfs/inode.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
diff --git a/fs/esdfs/lookup.c b/fs/esdfs/lookup.c
index 1d89120d784d..659cad8634b1 100644
--- a/fs/esdfs/lookup.c
+++ b/fs/esdfs/lookup.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -12,9 +13,61 @@
 
 #include "esdfs.h"
 
-#ifndef LOOKUP_NOCASE
-#define LOOKUP_NOCASE	0
-#endif
+struct esdfs_name_data {
+	struct dir_context ctx;
+	const struct qstr *to_find;
+	char match_name[NAME_MAX+1];
+	bool found;
+};
+
+static int esdfs_name_match(struct dir_context *ctx, const char *name, int namelen,
+		loff_t offset, u64 ino, unsigned int d_type)
+{
+	struct esdfs_name_data *buf = container_of(ctx, struct esdfs_name_data, ctx);
+	struct qstr candidate = QSTR_INIT(name, namelen);
+
+	if (qstr_case_eq(buf->to_find, &candidate)) {
+		memcpy(buf->match_name, name, namelen);
+		buf->match_name[namelen] = 0;
+		buf->found = true;
+		return 1;
+	}
+	return 0;
+}
+
+int esdfs_lookup_nocase(struct path *parent,
+		struct qstr *name,
+		struct path *path) {
+	int err = 0;
+	/* Use vfs_path_lookup to check if the dentry exists or not */
+	err = vfs_path_lookup(parent->dentry, parent->mnt, name->name, 0, path);
+	/* check for other cases */
+	if (err == -ENOENT) {
+		struct file *file;
+		const struct cred *cred = current_cred();
+
+		struct esdfs_name_data buffer = {
+			.ctx.actor = esdfs_name_match,
+			.to_find = name,
+			.found = false,
+		};
+
+		file = dentry_open(parent, O_RDONLY | O_DIRECTORY, cred);
+		if (IS_ERR(file))
+			return PTR_ERR(file);
+		err = iterate_dir(file, &buffer.ctx);
+		fput(file);
+		if (err)
+			return err;
+
+		if (buffer.found)
+			err = vfs_path_lookup(parent->dentry, parent->mnt,
+						buffer.match_name, 0, path);
+		else
+			err = -ENOENT;
+	}
+	return err;
+}
 
 struct esdfs_ci_getdents_callback {
 	struct dir_context ctx;
@@ -43,7 +96,7 @@ void esdfs_destroy_dentry_cache(void)
 		kmem_cache_destroy(esdfs_dentry_cachep);
 }
 
-void free_dentry_private_data(struct dentry *dentry)
+void esdfs_free_dentry_private_data(struct dentry *dentry)
 {
 	if (!dentry || !dentry->d_fsdata)
 		return;
@@ -52,7 +105,7 @@ void free_dentry_private_data(struct dentry *dentry)
 }
 
 /* allocate new dentry private data */
-int new_dentry_private_data(struct dentry *dentry)
+int esdfs_new_dentry_private_data(struct dentry *dentry)
 {
 	struct esdfs_dentry_info *info = ESDFS_D(dentry);
 
@@ -205,54 +258,6 @@ int esdfs_interpose(struct dentry *dentry, struct super_block *sb,
 	return err;
 }
 
-static int esdfs_ci_filldir(void *dirent, const char *name, int namelen,
-		loff_t offset, u64 ino, unsigned int d_type)
-{
-	struct esdfs_ci_getdents_callback *buf;
-
-	buf = container_of(dirent, struct esdfs_ci_getdents_callback, ctx);
-
-	buf->count++;
-	if (!strncasecmp(name, buf->name, namelen) &&
-	    (strlen(buf->name) == namelen)) {
-		strlcpy(buf->match_name, name, namelen+1);
-		buf->found = 0;
-	}
-	return 0;
-}
-
-static int esdfs_ci_lookup(struct path *parent, const char *name,
-			struct path *path)
-{
-	int err = 0;
-	struct file *file;
-	const struct cred *cred = current_cred();
-	struct esdfs_ci_getdents_callback buf = {
-		.ctx.actor = esdfs_ci_filldir,
-		.ctx.pos = 0,
-		.name = name,
-		.found = -1
-	};
-
-	file = dentry_open(parent, O_RDONLY | O_DIRECTORY, cred);
-	if (IS_ERR(file))
-		return -ENOENT;
-
-	do {
-		buf.count = 0;
-		err = iterate_dir(file, &buf.ctx);
-		if (!buf.found)
-			break;
-	} while ((err >= 0) && buf.count);
-	fput(file);
-
-	if (!buf.found)
-		return vfs_path_lookup(parent->dentry, parent->mnt,
-					buf.match_name, 0, path);
-	else
-		return -ENOENT;
-}
-
 /*
  * Main driver function for esdfs's lookup.
  *
@@ -283,14 +288,8 @@ static struct dentry *__esdfs_lookup(struct dentry *dentry,
 	lower_dir_dentry = lower_parent_path->dentry;
 	lower_dir_mnt = lower_parent_path->mnt;
 
-	/* Use vfs_path_lookup to check if the dentry exists or not */
-	err = vfs_path_lookup(lower_dir_dentry, lower_dir_mnt, name,
-			      LOOKUP_NOCASE, &lower_path);
-
-	if (LOOKUP_NOCASE && (err == -ENOENT) &&
-	    !(flags & (LOOKUP_CREATE|LOOKUP_RENAME_TARGET))) {
-		err = esdfs_ci_lookup(lower_parent_path, name, &lower_path);
-	}
+	err = esdfs_lookup_nocase(lower_parent_path,
+			&dentry->d_name, &lower_path);
 
 	/* no error: handle positive dentries */
 	if (!err) {
@@ -360,7 +359,7 @@ struct dentry *esdfs_lookup(struct inode *dir, struct dentry *dentry,
 	parent = real_parent = dget_parent(dentry);
 
 	/* allocate dentry private data.  We free it in ->d_release */
-	err = new_dentry_private_data(dentry);
+	err = esdfs_new_dentry_private_data(dentry);
 	if (err) {
 		ret = ERR_PTR(err);
 		goto out;
diff --git a/fs/esdfs/main.c b/fs/esdfs/main.c
index dafe322b403f..538f3baa19b6 100644
--- a/fs/esdfs/main.c
+++ b/fs/esdfs/main.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -111,6 +112,7 @@ static int parse_options(struct super_block *sb, char *options)
 
 	while ((p = strsep(&options, ",")) != NULL) {
 		int token;
+
 		if (!*p)
 			continue;
 		/*
@@ -185,8 +187,9 @@ static int parse_options(struct super_block *sb, char *options)
 			clear_opt(sbi, DERIVE_CONFINE);
 			break;
 		default:
-			esdfs_msg(sb, KERN_ERR, "unrecognized mount option \"%s\" or missing value\n",
-				p);
+			esdfs_msg(sb, KERN_ERR,
+			  "unrecognized mount option \"%s\" or missing value\n",
+			  p);
 			return -EINVAL;
 		}
 	}
@@ -216,8 +219,8 @@ static int esdfs_read_super(struct super_block *sb, const char *dev_name,
 	err = kern_path(dev_name, LOOKUP_FOLLOW | LOOKUP_DIRECTORY,
 			&lower_path);
 	if (err) {
-		esdfs_msg(sb, KERN_ERR, "error accessing lower directory '%s'\n",
-			dev_name);
+		esdfs_msg(sb, KERN_ERR,
+			"error accessing lower directory '%s'\n", dev_name);
 		goto out;
 	}
 
@@ -277,7 +280,7 @@ static int esdfs_read_super(struct super_block *sb, const char *dev_name,
 
 	/* link the upper and lower dentries */
 	sb->s_root->d_fsdata = NULL;
-	err = new_dentry_private_data(sb->s_root);
+	err = esdfs_new_dentry_private_data(sb->s_root);
 	if (err)
 		goto out_freeroot;
 
@@ -285,11 +288,7 @@ static int esdfs_read_super(struct super_block *sb, const char *dev_name,
 
 	/* set the lower dentries for s_root */
 	esdfs_set_lower_path(sb->s_root, &lower_path);
-#ifdef CONFIG_SECURITY_SELINUX
-	security_secctx_to_secid(ESDFS_LOWER_SECCTX,
-				 strlen(ESDFS_LOWER_SECCTX),
-				 &sbi->lower_secid);
-#endif
+
 	/*
 	 * No need to call interpose because we already have a positive
 	 * dentry, which was instantiated by d_make_root.  Just need to
@@ -308,7 +307,8 @@ static int esdfs_read_super(struct super_block *sb, const char *dev_name,
 	    memcmp(&sbi->upper_perms,
 		   &esdfs_perms_table[ESDFS_PERMS_UPPER_DERIVED],
 		   sizeof(struct esdfs_perms)))
-		esdfs_msg(sb, KERN_WARNING, "'upper' mount option ignored in this derived mode\n");
+		esdfs_msg(sb, KERN_WARNING,
+			"'upper' mount option ignored in this derived mode\n");
 
 	/*
 	 * In Android 3.0 all user conent in the emulated storage tree was
@@ -337,7 +337,8 @@ static int esdfs_read_super(struct super_block *sb, const char *dev_name,
 	 * this driver.
 	 */
 	else
-		esdfs_msg(sb, KERN_WARNING, "unsupported derived permissions mode\n");
+		esdfs_msg(sb, KERN_WARNING,
+				"unsupported derived permissions mode\n");
 
 	/* initialize root inode */
 	esdfs_derive_perms(sb->s_root);
diff --git a/fs/esdfs/mmap.c b/fs/esdfs/mmap.c
index c09cfb9b6dfa..e54aca790561 100644
--- a/fs/esdfs/mmap.c
+++ b/fs/esdfs/mmap.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014, 2016 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
diff --git a/fs/esdfs/super.c b/fs/esdfs/super.c
index 0a68b5dd5f8b..7f09db35cd80 100644
--- a/fs/esdfs/super.c
+++ b/fs/esdfs/super.c
@@ -4,6 +4,7 @@
  * Copyright (c) 2003-2014 Stony Brook University
  * Copyright (c) 2003-2014 The Research Foundation of SUNY
  * Copyright (C) 2013-2014 Motorola Mobility, LLC
+ * Copyright (C) 2017      Google, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
diff --git a/include/uapi/linux/magic.h b/include/uapi/linux/magic.h
index 6220070d5bd4..4ff6ce7b9851 100644
--- a/include/uapi/linux/magic.h
+++ b/include/uapi/linux/magic.h
@@ -57,6 +57,8 @@
 #define REISER2FS_SUPER_MAGIC_STRING	"ReIsEr2Fs"
 #define REISER2FS_JR_SUPER_MAGIC_STRING	"ReIsEr3Fs"
 
+#define ESDFS_SUPER_MAGIC	0x00035df5
+
 #define SDCARDFS_SUPER_MAGIC	0x5dca2df5
 
 #define SMB_SUPER_MAGIC		0x517B
-- 
2.23.0.187.g17f5b7556c-goog

