From 8ea9105b170f923e8bda7dca74971b62e9a111c3 Mon Sep 17 00:00:00 2001
From: Matthias Kaehlcke <mka@chromium.org>
Date: Fri, 29 Mar 2019 16:51:23 -0700
Subject: [PATCH] CHROMIUM: ARM: Add alt-syscall support

Add ARM support for changing a thread's syscall table at runtime using
the alt-syscall infrastructure.

Note that alt-syscall is not supported in kernel configurations using
OABI or EABI with OABI_COMPAT.  It's possible to support OABI, but it
requires a bit of re-work to the common alt-syscall infrastructure and
to the syscall entry path.  This should not be an issue since OABI is
not supported on ChromeOS or Android.

Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/311003
(cherry picked from commit 6df35fbfb272e26c8bfbfe9b23a95ac45eeea325)

mka@:
 - moved loading of per-thread table pointer to invoke_syscall()
 - partial revert of da594e3fff39 ("ARM: obtain thread info structure
   later") to make sure 'tsk' is initialized when we access it. r9
   isn't accessed before the get_thread_info() call we moved up, hence
   this should be safe.
 - added spectre mitigation in invoke_syscall()
 - define 'sys_call_ptr_t' in arch/arm/include/asm/syscall.h
 - resolved context deltas in struct thread_info and vector_swi()
 - removed unecessary extern declaration of sys_call_table in thread_info.h
 - allow CONFIG_SECURITY_CHROMIUMOS for arm32
 - use SPDX licence identifier in alt-syscall.c
 - updated copyright notice of alt-syscall.c

BUG=chromium:941638, b:25408860
TEST=build with CONFIG_ALT_SYSCALL_CHROMIUMOS=y for cheza and veyron
  test_that ${DUT} security_AltSyscall
    => passes

Change-Id: If87c348262e493d8a422de76148e1613b24dce2e
Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/1532966
Commit-Ready: Brian Norris <briannorris@chromium.org>
Tested-by: Douglas Anderson <dianders@chromium.org>
Reviewed-by: Douglas Anderson <dianders@chromium.org>
---
 arch/arm/Kconfig                   |  1 +
 arch/arm/include/asm/syscall.h     |  4 +++
 arch/arm/include/asm/thread_info.h | 13 ++++++++
 arch/arm/kernel/Makefile           |  1 +
 arch/arm/kernel/alt-syscall.c      | 53 ++++++++++++++++++++++++++++++
 arch/arm/kernel/asm-offsets.c      |  4 +++
 arch/arm/kernel/entry-common.S     | 13 +++++++-
 arch/arm/kernel/entry-header.S     | 11 +++++++
 security/chromiumos/Kconfig        |  2 +-
 9 files changed, 100 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/kernel/alt-syscall.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 8ef577f78cb25..ce318ba56140d 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -4,6 +4,7 @@ config ARM
 	default y
 	select ARCH_CLOCKSOURCE_DATA
 	select ARCH_DISCARD_MEMBLOCK if !HAVE_ARCH_PFN_VALID && !KEXEC
+	select ARCH_HAS_ALT_SYSCALL if (AEABI && !OABI_COMPAT)
 	select ARCH_HAS_DEBUG_VIRTUAL if MMU
 	select ARCH_HAS_DEVMEM_IS_ALLOWED
 	select ARCH_HAS_ELF_RANDOMIZE
diff --git a/arch/arm/include/asm/syscall.h b/arch/arm/include/asm/syscall.h
index 06dea6bce293b..c844f12ee72e0 100644
--- a/arch/arm/include/asm/syscall.h
+++ b/arch/arm/include/asm/syscall.h
@@ -19,6 +19,10 @@
 
 extern const unsigned long sys_call_table[];
 
+typedef asmlinkage long (*sys_call_ptr_t)(unsigned long, unsigned long,
+					  unsigned long, unsigned long,
+					  unsigned long, unsigned long);
+
 static inline int syscall_get_nr(struct task_struct *task,
 				 struct pt_regs *regs)
 {
diff --git a/arch/arm/include/asm/thread_info.h b/arch/arm/include/asm/thread_info.h
index 8f55dc520a3e5..9e2f8f1dee4db 100644
--- a/arch/arm/include/asm/thread_info.h
+++ b/arch/arm/include/asm/thread_info.h
@@ -65,14 +65,27 @@ struct thread_info {
 #ifdef CONFIG_ARM_THUMBEE
 	unsigned long		thumbee_state;	/* ThumbEE Handler Base register */
 #endif
+#ifdef CONFIG_ALT_SYSCALL
+	unsigned int		nr_syscalls;
+	const void		*sys_call_table;
+#endif
 };
 
+#ifdef CONFIG_ALT_SYSCALL
+#define INIT_THREAD_INFO_SYSCALL					\
+	.nr_syscalls	= __NR_syscalls,				\
+	.sys_call_table	= &sys_call_table,
+#else
+#define INIT_THREAD_INFO_SYSCALL
+#endif
+
 #define INIT_THREAD_INFO(tsk)						\
 {									\
 	.task		= &tsk,						\
 	.flags		= 0,						\
 	.preempt_count	= INIT_PREEMPT_COUNT,				\
 	.addr_limit	= KERNEL_DS,					\
+	INIT_THREAD_INFO_SYSCALL					\
 }
 
 /*
diff --git a/arch/arm/kernel/Makefile b/arch/arm/kernel/Makefile
index 8cad59465af39..bf3f74d5d3841 100644
--- a/arch/arm/kernel/Makefile
+++ b/arch/arm/kernel/Makefile
@@ -65,6 +65,7 @@ obj-$(CONFIG_CRASH_DUMP)	+= crash_dump.o
 obj-$(CONFIG_SWP_EMULATE)	+= swp_emulate.o
 CFLAGS_swp_emulate.o		:= -Wa,-march=armv7-a
 obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
+obj-$(CONFIG_ALT_SYSCALL)	+= alt-syscall.o
 
 obj-$(CONFIG_CPU_XSCALE)	+= xscale-cp0.o
 obj-$(CONFIG_CPU_XSC3)		+= xscale-cp0.o
diff --git a/arch/arm/kernel/alt-syscall.c b/arch/arm/kernel/alt-syscall.c
new file mode 100644
index 0000000000000..08424ac0183c4
--- /dev/null
+++ b/arch/arm/kernel/alt-syscall.c
@@ -0,0 +1,53 @@
+// SPDX-License-Identifier: GPL-2.0
+
+/*
+ * ARM alt-syscall implementation
+ *
+ * Copyright 2015,2019 Google LLC.
+ */
+
+
+#include <linux/alt-syscall.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/syscalls.h>
+
+#include <asm/syscall.h>
+
+int arch_dup_sys_call_table(struct alt_sys_call_table *entry)
+{
+	int err;
+
+	if (!entry)
+		return -EINVAL;
+	if (entry->table)
+		return -EINVAL;
+
+	entry->size = __NR_syscalls;
+	entry->table = kcalloc(entry->size, sizeof(sys_call_ptr_t), GFP_KERNEL);
+	if (!entry->table) {
+		err = -ENOMEM;
+		goto failed;
+	}
+	memcpy(entry->table, sys_call_table,
+	       entry->size * sizeof(sys_call_ptr_t));
+
+	return 0;
+
+failed:
+	entry->size = 0;
+	return err;
+}
+EXPORT_SYMBOL_GPL(arch_dup_sys_call_table);
+
+int arch_set_sys_call_table(struct alt_sys_call_table *entry)
+{
+	if (!entry)
+		return -EINVAL;
+
+	current_thread_info()->nr_syscalls = entry->size;
+	current_thread_info()->sys_call_table = entry->table;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(arch_set_sys_call_table);
diff --git a/arch/arm/kernel/asm-offsets.c b/arch/arm/kernel/asm-offsets.c
index 3968d6c22455b..49b52f1934906 100644
--- a/arch/arm/kernel/asm-offsets.c
+++ b/arch/arm/kernel/asm-offsets.c
@@ -78,6 +78,10 @@ int main(void)
 #endif
 #ifdef CONFIG_CRUNCH
   DEFINE(TI_CRUNCH_STATE,	offsetof(struct thread_info, crunchstate));
+#endif
+#ifdef CONFIG_ALT_SYSCALL
+  DEFINE(TI_NR_SYSCALLS,	offsetof(struct thread_info, nr_syscalls));
+  DEFINE(TI_SYS_CALL_TABLE,	offsetof(struct thread_info, sys_call_table));
 #endif
   BLANK();
   DEFINE(S_R0,			offsetof(struct pt_regs, ARM_r0));
diff --git a/arch/arm/kernel/entry-common.S b/arch/arm/kernel/entry-common.S
index 746565a876dcd..a4609f4acf5a0 100644
--- a/arch/arm/kernel/entry-common.S
+++ b/arch/arm/kernel/entry-common.S
@@ -227,7 +227,13 @@ ENTRY(vector_swi)
 
 	uaccess_disable tbl
 
+	get_thread_info tsk
+
+#ifdef CONFIG_ALT_SYSCALL
+	ldr	tbl, [tsk, #TI_SYS_CALL_TABLE]	@ load per-thread syscall table pointer
+#else
 	adr	tbl, sys_call_table		@ load syscall table pointer
+#endif
 
 #if defined(CONFIG_OABI_COMPAT)
 	/*
@@ -243,7 +249,7 @@ ENTRY(vector_swi)
 	bic	scno, scno, #0xff000000		@ mask off SWI op-code
 	eor	scno, scno, #__NR_SYSCALL_BASE	@ check OS number
 #endif
-	get_thread_info tsk
+
 	/*
 	 * Reload the registers that may have been corrupted on entry to
 	 * the syscall assembly (by tracing or context tracking.)
@@ -369,7 +375,12 @@ ENTRY(\sym)
 sys_syscall:
 		bic	scno, r0, #__NR_OABI_SYSCALL_BASE
 		cmp	scno, #__NR_syscall - __NR_SYSCALL_BASE
+#ifdef CONFIG_ALT_SYSCALL
+		ldrne	r10, [tsk, #TI_NR_SYSCALLS]
+		cmpne	scno, r10		@ check per-thread range
+#else
 		cmpne	scno, #NR_syscalls	@ check range
+#endif
 #ifdef CONFIG_CPU_SPECTRE
 		movhs	scno, #0
 		csdb
diff --git a/arch/arm/kernel/entry-header.S b/arch/arm/kernel/entry-header.S
index 773424843d6ef..c5c43bb73e56b 100644
--- a/arch/arm/kernel/entry-header.S
+++ b/arch/arm/kernel/entry-header.S
@@ -380,8 +380,14 @@
 
 	.macro	invoke_syscall, table, nr, tmp, ret, reload=0
 #ifdef CONFIG_CPU_SPECTRE
+#ifdef CONFIG_ALT_SYSCALL
+	ldr	\tmp, [tsk, #TI_NR_SYSCALLS]
+	cmp	\nr, \tmp			@ check per-thread upper syscall limit
+	movlo	\tmp, \nr
+#else
 	mov	\tmp, \nr
 	cmp	\tmp, #NR_syscalls		@ check upper syscall limit
+#endif
 	movcs	\tmp, #0
 	csdb
 	badr	lr, \ret			@ return address
@@ -391,8 +397,13 @@
 	stmccia	sp, {r4, r5}			@ update stack arguments
 	.endif
 	ldrcc	pc, [\table, \tmp, lsl #2]	@ call sys_* routine
+#else
+#ifdef CONFIG_ALT_SYSCALL
+	ldr     \tmp, [tsk, #TI_NR_SYSCALLS]
+	cmp     \nr, \tmp			@ check per-thread upper syscall limit
 #else
 	cmp	\nr, #NR_syscalls		@ check upper syscall limit
+#endif
 	badr	lr, \ret			@ return address
 	.if	\reload
 	add	r1, sp, #S_R0 + S_OFF		@ pointer to regs
diff --git a/security/chromiumos/Kconfig b/security/chromiumos/Kconfig
index 14d657fb4d1b6..b3759d287083c 100644
--- a/security/chromiumos/Kconfig
+++ b/security/chromiumos/Kconfig
@@ -1,7 +1,7 @@
 config SECURITY_CHROMIUMOS
 	bool "Chromium OS Security Module"
 	depends on SECURITY
-	depends on X86_64 || ARM64
+	depends on X86_64 || ARM64 || ARM
 	help
 	  The purpose of the Chromium OS security module is to reduce attacking
 	  surface by preventing access to general purpose access modes not
-- 
2.23.0.351.gc4317032e6-goog

