From 9727db828ba64128c2078613ede6e6f34db47b0a Mon Sep 17 00:00:00 2001
From: Alexandru M Stan <amstan@chromium.org>
Date: Fri, 1 Dec 2017 15:13:15 -0800
Subject: [PATCH] CHROMIUM: cros-ec: record event timestamp in the hard irq

The cros_ec_sensors requires precise time synchronization
with the EC, both the EC and AP need to record the exact moment
an event was signalled to the AP.

First thing in the hard irq is the best place for this.

BUG=b/67743747, chromium:944342
TEST=fifo_timestamp in cros_ec_ring_process_event should still have sane
values
TEST=CTS should still pass

(Cherry-picked from 4.4, 4.14)
Conflicts:
	drivers/mfd/cros_ec.c
	include/linux/mfd/cros_ec.h

Change-Id: I1f288f71107a8e6b2bd5ceff12839958d5c76ebb
Signed-off-by: Alexandru M Stan <amstan@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/807337
Reviewed-by: Gwendal Grignou <gwendal@chromium.org>
Reviewed-by: Dmitry Torokhov <dtor@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/1302434
Commit-Ready: ChromeOS CL Exonerator Bot <chromiumos-cl-exonerator@appspot.gserviceaccount.com>
Tested-by: Enrico Granata <egranata@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/1532969
Reviewed-by: Enrico Granata <egranata@chromium.org>
---
 .../cros_ec_sensors/cros_ec_sensors_ring.c    | 10 +---------
 drivers/mfd/cros_ec.c                         | 19 +++++++++++++++++--
 drivers/platform/chrome/cros_ec_lpc.c         |  2 ++
 include/linux/mfd/cros_ec.h                   | 15 +++++++++++++++
 4 files changed, 35 insertions(+), 11 deletions(-)

diff --git a/drivers/iio/common/cros_ec_sensors/cros_ec_sensors_ring.c b/drivers/iio/common/cros_ec_sensors/cros_ec_sensors_ring.c
index e80c5fd5c2bc..5a8251db25da 100644
--- a/drivers/iio/common/cros_ec_sensors/cros_ec_sensors_ring.c
+++ b/drivers/iio/common/cros_ec_sensors/cros_ec_sensors_ring.c
@@ -93,14 +93,6 @@ struct cros_ec_sensors_ring_state {
 static const struct iio_info ec_sensors_info = {
 };
 
-static s64 cros_ec_get_time_ns(void)
-{
-	struct timespec ts;
-
-	get_monotonic_boottime(&ts);
-	return timespec_to_ns(&ts);
-}
-
 static int cros_ec_ring_fifo_toggle(struct cros_ec_sensors_ring_state *state,
 				    bool on)
 {
@@ -391,7 +383,7 @@ static int cros_ec_ring_event(struct notifier_block *nb,
 		return NOTIFY_OK;
 
 	state->fifo_info.info = ec->event_data.data.sensor_fifo.info;
-	state->fifo_timestamp[NEW_TS] = cros_ec_get_time_ns();
+	state->fifo_timestamp[NEW_TS] = ec->last_event_time;
 	cros_ec_ring_handler(state);
 	return NOTIFY_OK;
 }
diff --git a/drivers/mfd/cros_ec.c b/drivers/mfd/cros_ec.c
index 99632aea6dbe..f4ad853c7531 100644
--- a/drivers/mfd/cros_ec.c
+++ b/drivers/mfd/cros_ec.c
@@ -51,6 +51,20 @@ static const struct mfd_cell ec_pd_cell = {
 	.pdata_size = sizeof(pd_p),
 };
 
+s64 cros_ec_get_time_ns(void)
+{
+	return ktime_get_boot_ns();
+}
+EXPORT_SYMBOL(cros_ec_get_time_ns);
+
+static irqreturn_t ec_irq_handler(int irq, void *data) {
+	struct cros_ec_device *ec_dev = data;
+
+	ec_dev->last_event_time = cros_ec_get_time_ns();
+
+	return IRQ_WAKE_THREAD;
+}
+
 static irqreturn_t ec_irq_thread(int irq, void *data)
 {
 	struct cros_ec_device *ec_dev = data;
@@ -119,8 +133,9 @@ int cros_ec_register(struct cros_ec_device *ec_dev)
 	}
 
 	if (ec_dev->irq > 0) {
-		err = devm_request_threaded_irq(dev, ec_dev->irq, NULL,
-				ec_irq_thread, IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+		err = devm_request_threaded_irq(dev, ec_dev->irq,
+				ec_irq_handler, ec_irq_thread,
+				IRQF_TRIGGER_LOW | IRQF_ONESHOT,
 				"chromeos-ec", ec_dev);
 		if (err) {
 			dev_err(dev, "Failed to request IRQ %d: %d",
diff --git a/drivers/platform/chrome/cros_ec_lpc.c b/drivers/platform/chrome/cros_ec_lpc.c
index 14684a56e40f..603ae263b18a 100644
--- a/drivers/platform/chrome/cros_ec_lpc.c
+++ b/drivers/platform/chrome/cros_ec_lpc.c
@@ -234,6 +234,8 @@ static void cros_ec_lpc_acpi_notify(acpi_handle device, u32 value, void *data)
 {
 	struct cros_ec_device *ec_dev = data;
 
+	ec_dev->last_event_time = cros_ec_get_time_ns();
+
 	if (ec_dev->mkbp_event_supported &&
 	    cros_ec_get_next_event(ec_dev, NULL) > 0)
 		blocking_notifier_call_chain(&ec_dev->event_notifier, 0,
diff --git a/include/linux/mfd/cros_ec.h b/include/linux/mfd/cros_ec.h
index 4410c7a9ab77..ac2b79f1cfb5 100644
--- a/include/linux/mfd/cros_ec.h
+++ b/include/linux/mfd/cros_ec.h
@@ -128,6 +128,8 @@ struct cros_ec_command {
  * @event_data: Raw payload transferred with the MKBP event.
  * @event_size: Size in bytes of the event data.
  * @host_event_wake_mask: Mask of host events that cause wake from suspend.
+ * @last_event_time: exact time from the hard irq when we got notified of
+ *     a new event.
  */
 struct cros_ec_device {
 	/* These are used by other drivers that want to talk to the EC */
@@ -163,6 +165,7 @@ struct cros_ec_device {
 	struct ec_response_get_next_event_v1 event_data;
 	int event_size;
 	u32 host_event_wake_mask;
+	s64 last_event_time;
 };
 
 /**
@@ -330,6 +333,18 @@ int cros_ec_get_next_event(struct cros_ec_device *ec_dev, bool *wake_event);
  */
 u32 cros_ec_get_host_event(struct cros_ec_device *ec_dev);
 
+/**
+ * cros_ec_get_time_ns - Return time in ns.
+ *
+ * This is the function used to record the time for last_event_time in struct
+ * cros_ec_device during the hard irq.
+ *
+ * This function is probably implemented using ktime_get_boot_ns(), but it's
+ * exposed here to make sure all cros_ec drivers use the same code path to get
+ * the time.
+ */
+s64 cros_ec_get_time_ns(void);
+
 /* sysfs stuff */
 extern struct attribute_group cros_ec_attr_group;
 extern struct attribute_group cros_ec_lightbar_attr_group;
-- 
2.23.0.187.g17f5b7556c-goog

