From 6f9bcbc60d476cbeea639f7590304b64d7f0bcf0 Mon Sep 17 00:00:00 2001
From: Lin Huang <hl@rock-chips.com>
Date: Wed, 30 Sep 2015 18:33:06 +0800
Subject: [PATCH] CHROMIUM: cpufreq: set cpu min frequency through
 complex-usb-min-frequency property

in rk3288 platform when use some tpye of usb speaker it request cpu frequency
larger than 1.2Ghz, so we get the min frequency from complex-usb-min-frequency
property, and update cpu frequency policy when we need it, note: if thermal
throttling, and complex-usb-min-frequency larger than throtting frequency,
we will use throttling frquency as minimum frequency.

BUG=chromium:941638
TEST=on mickey board, plug in usb speaker, run command:
     cat /sys/device/system/cpu/cpu0/cpufreq/scaling_min_freq
     get result: 1200000
     if temperature over 82C, get the result:816000

Change-Id: I4d2111f93aa71a33f9a193be3592d0225ab1dffe
Signed-off-by: Lin Huang <hl@rock-chips.com>
Reviewed-on: https://chromium-review.googlesource.com/303300
Reviewed-by: Douglas Anderson <dianders@chromium.org>
(cherry picked from commit b0a35a3f72c38a979e1efa2c167f461c37466a29)
[dianders: re-jiggered to support 4.19]
Signed-off-by: Douglas Anderson <dianders@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/1635440
Legacy-Commit-Queue: Commit Bot <commit-bot@chromium.org>
Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
---
 drivers/cpufreq/cpufreq.c | 73 +++++++++++++++++++++++++++++++++++++--
 include/linux/cpufreq.h   | 12 +++++++
 2 files changed, 83 insertions(+), 2 deletions(-)

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 88b29c0d03ab..d73359433891 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -26,6 +26,7 @@
 #include <linux/kernel_stat.h>
 #include <linux/module.h>
 #include <linux/mutex.h>
+#include <linux/of.h>
 #include <linux/slab.h>
 #include <linux/suspend.h>
 #include <linux/syscore_ops.h>
@@ -1367,11 +1368,21 @@ static int cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
 			return ret;
 	}
 
-	/* Create sysfs link on CPU registration */
 	policy = per_cpu(cpufreq_cpu_data, cpu);
-	if (policy)
+	if (policy) {
+		/* Create sysfs link on CPU registration */
 		add_cpu_dev_symlink(policy, cpu);
 
+		/*
+		 * Some usb devices request cpu frequency larger than a
+		 * specific value
+		 */
+		down_write(&policy->rwsem);
+		of_property_read_u32(dev->of_node, "complex-usb-min-frequency",
+				     &policy->complexusb_minfreq);
+		up_write(&policy->rwsem);
+	}
+
 	return 0;
 }
 
@@ -2240,6 +2251,21 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
 	blocking_notifier_call_chain(&cpufreq_policy_notifier_list,
 			CPUFREQ_ADJUST, new_policy);
 
+	/*
+	 * adjust if plug complex usb device
+	 * This code doesn't use cpufreq_verify_within_limits()
+	 * because we don't want to override someone else's max
+	 * (if the device is thermally throttled we'd rather just
+	 * sacrifice the quality of USB instead of going over our
+	 * thermal budget).
+	 */
+	if (policy->complexusb_cnt && policy->complexusb_minfreq) {
+		if (policy->complexusb_minfreq > new_policy->min)
+			new_policy->min = policy->complexusb_minfreq;
+		if (new_policy->min > new_policy->max)
+			new_policy->min = new_policy->max;
+	}
+
 	/*
 	 * verify the cpu speed can be set within this limit, which might be
 	 * different to the first one
@@ -2358,6 +2384,49 @@ void cpufreq_update_policy(unsigned int cpu)
 }
 EXPORT_SYMBOL(cpufreq_update_policy);
 
+/**
+ * cpufreq_start_complex_usb
+ *
+ * set cpu min frequency to complex-usb-min-frequency
+ * which define in dts
+ */
+void cpufreq_start_complex_usb(void)
+{
+	struct cpufreq_policy *policy = cpufreq_cpu_get(0);
+	bool need_update;
+
+	down_write(&policy->rwsem);
+	policy->complexusb_cnt++;
+	need_update = policy->complexusb_cnt == 1;
+	up_write(&policy->rwsem);
+	cpufreq_cpu_put(policy);
+
+	if (need_update)
+		cpufreq_update_policy(0);
+}
+EXPORT_SYMBOL(cpufreq_start_complex_usb);
+
+/**
+ * cpufreq_end_complex_usb
+ *
+ * revover cpu min frequency
+ */
+void cpufreq_end_complex_usb(void)
+{
+	struct cpufreq_policy *policy = cpufreq_cpu_get(0);
+	bool need_update;
+
+	down_write(&policy->rwsem);
+	policy->complexusb_cnt--;
+	need_update = policy->complexusb_cnt == 0;
+	up_write(&policy->rwsem);
+	cpufreq_cpu_put(policy);
+
+	if (need_update)
+		cpufreq_update_policy(0);
+}
+EXPORT_SYMBOL(cpufreq_end_complex_usb);
+
 /*********************************************************************
  *               BOOST						     *
  *********************************************************************/
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 5d8e4fc23f5a..ad647f32f5ed 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -154,6 +154,10 @@ struct cpufreq_policy {
 
 	/* Pointer to the cooling device if used for thermal mitigation */
 	struct thermal_cooling_device *cdev;
+
+	unsigned int complexusb_cnt; /* complex usb device refcount */
+	unsigned int complexusb_minfreq; /* in Khz, when plug complex usb
+					  * device, cpu min frequency value */
 };
 
 /* Only for ACPI */
@@ -227,6 +231,14 @@ static inline void cpufreq_stats_record_transition(struct cpufreq_policy *policy
 						   unsigned int new_freq) { }
 #endif /* CONFIG_CPU_FREQ_STAT */
 
+#ifdef CONFIG_CPU_FREQ
+void cpufreq_start_complex_usb(void);
+void cpufreq_end_complex_usb(void);
+#else
+static inline void cpufreq_start_complex_usb(void) { }
+static inline void cpufreq_end_complex_usb(void) { }
+#endif
+
 /*********************************************************************
  *                      CPUFREQ DRIVER INTERFACE                     *
  *********************************************************************/
-- 
2.23.0.187.g17f5b7556c-goog

