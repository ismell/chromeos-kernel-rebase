From 4f5c81dfb427edcbf98deaf1750cfa3ee6bd9ffc Mon Sep 17 00:00:00 2001
From: Gwendal Grignou <gwendal@chromium.org>
Date: Thu, 11 Jul 2019 11:10:00 -0700
Subject: [PATCH] CHROMIUM: mfd: cros_ec: Try loading cros_ec_accel_legacy on
 more models""

This reverts commit 9ea7e44fac688c2b8213e2be8faef113653cec59.

It relands CL:1632658 with a fix when filling parameter data:
param region is erased by resp region, so we need to specify the
subcommand at each call.

BUG=chromium:965274,b:135929928
TEST=Check on veyron_minnie, arcada:
- screen rotation is working
- all sensors are reported
- no cros_ec error message in dmesg.

Change-Id: I3120e588539d4912d4a4fecd4ccf1709c2e6a2bc
Signed-off-by: Gwendal Grignou <gwendal@chromium.org>
Reviewed-on: https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/1697111
Reviewed-by: Douglas Anderson <dianders@chromium.org>
Reviewed-by: Jack Rosenthal <jrosenth@chromium.org>
Commit-Queue: Douglas Anderson <dianders@chromium.org>
Tested-by: Douglas Anderson <dianders@chromium.org>
---
 drivers/mfd/cros_ec_dev.c | 112 ++++++++++++++++++++++++++++----------
 1 file changed, 83 insertions(+), 29 deletions(-)

diff --git a/drivers/mfd/cros_ec_dev.c b/drivers/mfd/cros_ec_dev.c
index b899bd446a04..2ad5a0f5eff3 100644
--- a/drivers/mfd/cros_ec_dev.c
+++ b/drivers/mfd/cros_ec_dev.c
@@ -416,26 +416,27 @@ static void cros_ec_class_release(struct device *dev)
 	kfree(to_cros_ec_dev(dev));
 }
 
-static void cros_ec_sensors_register(struct cros_ec_dev *ec)
+/*
+ * Return the number of MEMS sensors supported.
+ * Return < 0 in case of error.
+ */
+static int cros_ec_get_sensor_count(struct cros_ec_dev *ec)
 {
 	/*
 	 * Issue a command to get the number of sensor reported.
 	 * Build an array of sensors driver and register them all.
 	 */
-	int ret, i, id, sensor_num;
-	struct mfd_cell *sensor_cells;
-	struct cros_ec_sensor_platform *sensor_platforms;
-	int sensor_type[MOTIONSENSE_TYPE_MAX];
+	int ret, sensor_count;
 	struct ec_params_motion_sense *params;
 	struct ec_response_motion_sense *resp;
 	struct cros_ec_command *msg;
 
 	msg = kzalloc(sizeof(struct cros_ec_command) +
-		      max(sizeof(*params), sizeof(*resp)), GFP_KERNEL);
+			max(sizeof(*params), sizeof(*resp)), GFP_KERNEL);
 	if (msg == NULL)
-		return;
+		return -ENOMEM;
 
-	msg->version = 2;
+	msg->version = 1;
 	msg->command = EC_CMD_MOTION_SENSE_CMD + ec->cmd_offset;
 	msg->outsize = sizeof(*params);
 	msg->insize = sizeof(*resp);
@@ -444,14 +445,53 @@ static void cros_ec_sensors_register(struct cros_ec_dev *ec)
 	params->cmd = MOTIONSENSE_CMD_DUMP;
 
 	ret = cros_ec_cmd_xfer(ec->ec_dev, msg);
-	if (ret < 0 || msg->result != EC_RES_SUCCESS) {
-		dev_warn(ec->dev, "cannot get EC sensor information: %d/%d\n",
-			 ret, msg->result);
-		goto error;
+	if (ret < 0) {
+		sensor_count = ret;
+	} else if (msg->result != EC_RES_SUCCESS) {
+		sensor_count = -EPROTO;
+	} else {
+		resp = (struct ec_response_motion_sense *)msg->data;
+		sensor_count = resp->dump.sensor_count;
+	}
+	kfree(msg);
+
+	return sensor_count;
+}
+
+static void cros_ec_sensors_register(struct cros_ec_dev *ec)
+{
+	/*
+	 * Issue a command to get the number of sensor reported.
+	 * Build an array of sensors driver and register them all.
+	 */
+	int ret, i, sensor_num, id = 0;
+	struct mfd_cell *sensor_cells;
+	struct cros_ec_sensor_platform *sensor_platforms;
+	int sensor_type[MOTIONSENSE_TYPE_MAX] = { 0 };
+	struct ec_params_motion_sense *params;
+	struct ec_response_motion_sense *resp;
+	struct cros_ec_command *msg;
+
+	sensor_num = cros_ec_get_sensor_count(ec);
+	if (sensor_num <= 0) {
+		dev_err(ec->dev,
+			"Unable to retrieve sensor information (err:%d)\n",
+			sensor_num);
+		return;
 	}
 
+	msg = kzalloc(sizeof(struct cros_ec_command) +
+			max(sizeof(*params), sizeof(*resp)), GFP_KERNEL);
+	if (msg == NULL)
+		return;
+
+	msg->version = 2;
+	msg->command = EC_CMD_MOTION_SENSE_CMD + ec->cmd_offset;
+	msg->outsize = sizeof(*params);
+	msg->insize = sizeof(*resp);
+	params = (struct ec_params_motion_sense *)msg->data;
 	resp = (struct ec_response_motion_sense *)msg->data;
-	sensor_num = resp->dump.sensor_count;
+
 	/*
 	 * Allocate 2 extra sensors if lid angle sensor and/or FIFO are needed.
 	 */
@@ -466,8 +506,6 @@ static void cros_ec_sensors_register(struct cros_ec_dev *ec)
 	if (sensor_platforms == NULL)
 		goto error_platforms;
 
-	memset(sensor_type, 0, sizeof(sensor_type));
-	id = 0;
 	for (i = 0; i < sensor_num; i++) {
 		params->cmd = MOTIONSENSE_CMD_INFO;
 		params->info.sensor_num = i;
@@ -507,7 +545,6 @@ static void cros_ec_sensors_register(struct cros_ec_dev *ec)
 			continue;
 		}
 		sensor_platforms[id].sensor_num = i;
-		sensor_cells[id].id = sensor_type[resp->info.type];
 		sensor_cells[id].platform_data = &sensor_platforms[id];
 		sensor_cells[id].pdata_size =
 			sizeof(struct cros_ec_sensor_platform);
@@ -529,7 +566,7 @@ static void cros_ec_sensors_register(struct cros_ec_dev *ec)
 		id++;
 	}
 
-	ret = mfd_add_devices(ec->dev, 0, sensor_cells, id,
+	ret = mfd_add_devices(ec->dev, PLATFORM_DEVID_AUTO, sensor_cells, id,
 			      NULL, 0, NULL);
 	if (ret)
 		dev_err(ec->dev, "failed to add EC sensors\n");
@@ -564,19 +601,36 @@ static void cros_ec_accel_legacy_register(struct cros_ec_dev *ec)
 	 * Check if EC supports direct memory reads and if EC has
 	 * accelerometers.
 	 */
-	if (!ec_dev->cmd_readmem)
-		return;
-
-	ret = ec_dev->cmd_readmem(ec_dev, EC_MEMMAP_ACC_STATUS, 1, &status);
-	if (ret < 0) {
-		dev_warn(ec->dev, "EC does not support direct reads.\n");
-		return;
-	}
+	if (ec_dev->cmd_readmem) {
+		ret = ec_dev->cmd_readmem(ec_dev, EC_MEMMAP_ACC_STATUS, 1,
+					  &status);
+		if (ret < 0) {
+			dev_warn(ec->dev, "EC direct read error %d.\n", ret);
+			return;
+		}
 
-	/* Check if EC has accelerometers. */
-	if (!(status & EC_MEMMAP_ACC_STATUS_PRESENCE_BIT)) {
-		dev_info(ec->dev, "EC does not have accelerometers.\n");
-		return;
+		/* Check if EC has accelerometers. */
+		if (!(status & EC_MEMMAP_ACC_STATUS_PRESENCE_BIT)) {
+			dev_info(ec->dev, "EC does not have accelerometers.\n");
+			return;
+		}
+	} else {
+		ret = cros_ec_get_sensor_count(ec);
+		if (ret <= 0)
+			return;
+		if (ret != CROS_EC_SENSOR_LEGACY_NUM) {
+			/*
+			 * We expect one accelerometer in the lid, one in the
+			 * base.
+			 * If we have more than 2, one will not be an
+			 * accelerometer. If we have less, this is not a
+			 * device we support.
+			 */
+			dev_warn(ec->dev,
+				 "EC support more than %d sensors: %d.\n",
+				 CROS_EC_SENSOR_LEGACY_NUM, ret);
+			return;
+		}
 	}
 
 	/*
-- 
2.23.0.187.g17f5b7556c-goog

