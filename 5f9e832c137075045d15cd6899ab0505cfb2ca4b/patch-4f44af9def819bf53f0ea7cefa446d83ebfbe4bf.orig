From 4f44af9def819bf53f0ea7cefa446d83ebfbe4bf Mon Sep 17 00:00:00 2001
From: Pawel Osciak <posciak@chromium.org>
Date: Fri, 6 Feb 2015 21:11:57 +0900
Subject: [PATCH] CHROMIUM: vb2: Don't reuse USERPTR buffers.

The logic in vb2 USERPTR implementation assumes that userspace will always
use the same V4L2 buffer index with one virtual address for the duration
of its usage. Based on that, it does not release a pinned buffer, even when
it is returned to userspace, until a different address is queued for the
same index, because it assumes that when that happens, the userspace has
changed the working set of buffers and the old set is not in use anymore.

However, if userspace does not maintain a constant address to index
relationship, vb2 will release the previous buffer pinned for that index
at the time of queuing the new one, which is after the old buffer has been
returned to the userspace. That may be destructive if that buffer is
already in use elsewhere at that time, as userspace expects that kernel
disclaimed the old buffer before it was dequeued.

Signed-off-by: Pawel Osciak <posciak@chromium.org>

TEST=corruption test with V4L2VEA
BUG=chrome-os-partner:35860

Original-Change-Id: I10c67f89aaea7fb5247a223aad4ac9728817af7a
Reviewed-on: https://chromium-review.googlesource.com/246970
Reviewed-by: Tomasz Figa <tfiga@chromium.org>
Tested-by: Pawel Osciak <posciak@chromium.org>
Commit-Queue: Pawel Osciak <posciak@chromium.org>
(cherry picked from commit f0ce3a1a20ebc892ab478b127b680ba9a305adbb)
Signed-off-by: Pawel Osciak <posciak@chromium.org>

Change-Id: I836fe0165ec08a78d6b9cb91e03e994163035e23
Reviewed-on: https://chromium-review.googlesource.com/302513
Commit-Ready: Pawel Osciak <posciak@chromium.org>
Tested-by: Pawel Osciak <posciak@chromium.org>
Reviewed-by: Duncan Laurie <dlaurie@chromium.org>

Conflicts:
	drivers/media/v4l2-core/videobuf2-core.c

[rebase44(groeck): Resolved conflicts]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

Conflicts:
	drivers/media/v4l2-core/videobuf2-core.c

[rebase412(groeck): Resolved conflicts]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

[rebase414(lannm): Resolved conflicts]
Signed-off-by: Lann Martin <lannm@chromium.org>

[rebase414(groeck): Addressed review comments:
	Clear planes data in modified code]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

[rebase419(rrangel): Context conflict]
Signed-off-by: Raul E Rangel <rrangel@chromium.org>
---
 .../media/common/videobuf2/videobuf2-core.c   | 58 ++++++++-----------
 1 file changed, 23 insertions(+), 35 deletions(-)

diff --git a/drivers/media/common/videobuf2/videobuf2-core.c b/drivers/media/common/videobuf2/videobuf2-core.c
index d5d8abdf5805..c19f2192aa23 100644
--- a/drivers/media/common/videobuf2/videobuf2-core.c
+++ b/drivers/media/common/videobuf2/videobuf2-core.c
@@ -1003,7 +1003,6 @@ static int __prepare_userptr(struct vb2_buffer *vb)
 	void *mem_priv;
 	unsigned int plane;
 	int ret = 0;
-	bool reacquired = vb->planes[0].mem_priv == NULL;
 
 	memset(planes, 0, sizeof(planes[0]) * vb->num_planes);
 	/* Copy relevant information provided by the userspace */
@@ -1013,14 +1012,7 @@ static int __prepare_userptr(struct vb2_buffer *vb)
 		return ret;
 
 	for (plane = 0; plane < vb->num_planes; ++plane) {
-		/* Skip the plane if already verified */
-		if (vb->planes[plane].m.userptr &&
-			vb->planes[plane].m.userptr == planes[plane].m.userptr
-			&& vb->planes[plane].length == planes[plane].length)
-			continue;
-
-		dprintk(3, "userspace address for plane %d changed, reacquiring memory\n",
-			plane);
+		WARN_ON(vb->planes[plane].mem_priv != NULL);
 
 		/* Check if the provided plane buffer is large enough */
 		if (planes[plane].length < vb->planes[plane].min_length) {
@@ -1032,21 +1024,6 @@ static int __prepare_userptr(struct vb2_buffer *vb)
 			goto err;
 		}
 
-		/* Release previously acquired memory if present */
-		if (vb->planes[plane].mem_priv) {
-			if (!reacquired) {
-				reacquired = true;
-				call_void_vb_qop(vb, buf_cleanup, vb);
-			}
-			call_void_memop(vb, put_userptr, vb->planes[plane].mem_priv);
-		}
-
-		vb->planes[plane].mem_priv = NULL;
-		vb->planes[plane].bytesused = 0;
-		vb->planes[plane].length = 0;
-		vb->planes[plane].m.userptr = 0;
-		vb->planes[plane].data_offset = 0;
-
 		/* Acquire each plane's memory */
 		mem_priv = call_ptr_memop(vb, get_userptr,
 				q->alloc_devs[plane] ? : q->dev,
@@ -1072,17 +1049,14 @@ static int __prepare_userptr(struct vb2_buffer *vb)
 		vb->planes[plane].data_offset = planes[plane].data_offset;
 	}
 
-	if (reacquired) {
-		/*
-		 * One or more planes changed, so we must call buf_init to do
-		 * the driver-specific initialization on the newly acquired
-		 * buffer, if provided.
-		 */
-		ret = call_vb_qop(vb, buf_init, vb);
-		if (ret) {
-			dprintk(1, "buffer initialization failed\n");
-			goto err;
-		}
+	/*
+	 * Call buf_init to do driver-specific initialization on the newly
+	 * acquired buffer, if provided.
+	 */
+	ret = call_vb_qop(vb, buf_init, vb);
+	if (ret) {
+		dprintk(1, "buffer initialization failed\n");
+		goto err;
 	}
 
 	ret = call_vb_qop(vb, buf_prepare, vb);
@@ -1786,6 +1760,20 @@ static void __vb2_dqbuf(struct vb2_buffer *vb)
 
 	vb->state = VB2_BUF_STATE_DEQUEUED;
 
+	if (q->memory == VB2_MEMORY_USERPTR) {
+		call_void_vb_qop(vb, buf_cleanup, vb);
+
+		for (i = 0; i < vb->num_planes; ++i) {
+			WARN_ON(vb->planes[i].mem_priv == NULL);
+			call_void_memop(vb, put_userptr,
+					vb->planes[i].mem_priv);
+			vb->planes[i].mem_priv = NULL;
+			vb->planes[i].bytesused = 0;
+			vb->planes[i].length = 0;
+			vb->planes[i].m.userptr = 0;
+			vb->planes[i].data_offset = 0;
+		}
+	}
 	call_void_bufop(q, init_buffer, vb);
 }
 
-- 
2.23.0.rc1.153.gdeed80330f-goog

